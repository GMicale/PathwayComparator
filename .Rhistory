ortho.data <- ortho.data[,c(paste0(first.org," id"),paste0(first.org," symbol"),
paste0(second.org," id"),paste0(second.org," symbol"))]
colnames(ortho.data) <- c("source","sourceName","target","targetName")
ortho.data$weight <- 0
ortho.data$type <- "inter"
multilayer.edges <- rbind(multilayer.edges,ortho.data)
multilayer.edges <- multilayer.edges[!duplicated(multilayer.edges[,c("source","target")]),]
}
}
}
View(multilayer.edges)
#Set node layer for hierarchical layout
freq.layer <- table(multilayer.nodes$layer)
multilayer.nodes$level <- unlist(sapply(1:length(freq.layer),function(x){rep(x,freq.layer[x])}))
multilayer.nodes
freq.layer
sapply(1:length(freq.layer),function(x){rep(x,freq.layer[x])})
unlist(sapply(1:length(freq.layer),function(x){rep(x,freq.layer[x])}))
unlist(lapply(1:length(freq.layer),function(x){rep(x,freq.layer[x])}))
multilayer.nodes$level <- unlist(lapply(1:length(freq.layer),function(x){rep(x,freq.layer[x])}))
multilayer.nodes
source("PathwaysFunctions.R")
runApp()
1:0
source("PathwaysFunctions.R")
runApp()
multilayer.nodes$level
table(c(1,1,1,1,1,1))
freq.layer <- table(c(1,1,1,1,1,1))
unlist(lapply(1:length(freq.layer),function(x){rep(x,freq.layer[x])}))
source("PathwaysFunctions.R")
runApp()
source("PathwaysFunctions.R")
runApp()
multilayer.nodes
source("PathwaysFunctions.R")
runApp()
source("PathwaysFunctions.R")
runApp()
source("PathwaysFunctions.R")
runApp()
source("PathwaysFunctions.R")
runApp()
runApp()
runApp()
runApp()
library(shiny)
# Server
server <- function(input, output) {
# Auxiliary function
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
# Reactive
getListUnder <- reactive({
df <- mtcars
df$Delete <- shinyInput(actionButton, nrow(df),'delete_',label = "Delete",icon=icon("trash"),
style = "color: red;background-color: white",
onclick = paste0('Shiny.onInputChange( \"delete_button\" , this.id, {priority: \"event\"})'))
df$ID <- seq.int(nrow(df))
return(df)
})
# Assign reactive data.frame to reactiveValues
values <- reactiveValues(df = NULL)
values$df <- isolate({getListUnder()})
# When press delete_button, remove row
observeEvent( input$delete_button, {
selectedRow <- as.numeric(strsplit(input$delete_button, "_")[[1]][2])
values$df <<- subset(values$df, ID!=selectedRow)
})
# Render data.table
output$print_mtcars <- renderDataTable({
final_df <- values$df
table <- final_df %>%
DT::datatable(filter = "none", rownames = F
,extensions = 'FixedColumns'
,options = list(pageLength = 10,scrollX = TRUE,
fixedColumns = list(leftColumns = 2)),
escape=F)
})
}
# UI
ui <- fluidPage(
titlePanel("Delete rows"),
mainPanel(
DT::dataTableOutput("print_mtcars")
)
)
# Run the application
shinyApp(ui = ui, server = server)
help(shinyInput)
help("actionButton")
library(shiny)
# Server
server <- function(input, output) {
# Auxiliary function
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
# Reactive
getListUnder <- reactive({
df <- mtcars
df$Delete <- shinyInput(actionButton, nrow(df),'delete_',label = "",icon=icon("trash"),
style = "color: red;background-color: white",
onclick = paste0('Shiny.onInputChange( \"delete_button\" , this.id, {priority: \"event\"})'))
df$ID <- seq.int(nrow(df))
return(df)
})
# Assign reactive data.frame to reactiveValues
values <- reactiveValues(df = NULL)
values$df <- isolate({getListUnder()})
# When press delete_button, remove row
observeEvent( input$delete_button, {
selectedRow <- as.numeric(strsplit(input$delete_button, "_")[[1]][2])
values$df <<- subset(values$df, ID!=selectedRow)
})
# Render data.table
output$print_mtcars <- renderDataTable({
final_df <- values$df
table <- final_df %>%
DT::datatable(filter = "none", rownames = F
,extensions = 'FixedColumns'
,options = list(pageLength = 10,scrollX = TRUE,
fixedColumns = list(leftColumns = 2)),
escape=F)
})
}
# UI
ui <- fluidPage(
titlePanel("Delete rows"),
mainPanel(
DT::dataTableOutput("print_mtcars")
)
)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Server
server <- function(input, output) {
# Auxiliary function
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- FUN(paste0(id, i), ...)
}
inputs
}
# Reactive
getListUnder <- reactive({
df <- mtcars
df$Delete <- shinyInput(actionButton, nrow(df),'delete_',label = "",icon=icon("trash"),
style = "color: red;background-color: white",
onclick = paste0('Shiny.onInputChange( \"delete_button\" , this.id, {priority: \"event\"})'))
df$ID <- seq.int(nrow(df))
return(df)
})
# Assign reactive data.frame to reactiveValues
values <- reactiveValues(df = NULL)
values$df <- isolate({getListUnder()})
# When press delete_button, remove row
observeEvent( input$delete_button, {
selectedRow <- as.numeric(strsplit(input$delete_button, "_")[[1]][2])
values$df <<- subset(values$df, ID!=selectedRow)
})
# Render data.table
output$print_mtcars <- renderDataTable({
final_df <- values$df
table <- final_df %>%
DT::datatable(filter = "none", rownames = F
,extensions = 'FixedColumns'
,options = list(pageLength = 10,scrollX = TRUE,
fixedColumns = list(leftColumns = 2)),
escape=F)
})
}
# UI
ui <- fluidPage(
titlePanel("Delete rows"),
mainPanel(
DT::dataTableOutput("print_mtcars")
)
)
# Run the application
shinyApp(ui = ui, server = server)
vector(3)
library(shiny)
# Server
server <- function(input, output) {
# Auxiliary function
shinyInput <- function(FUN, len, id, ...) {
inputs <- c()
for (i in seq_len(len)) {
inputs <- c(inputs,FUN(paste0(id, i), ...))
}
inputs
}
# Reactive
getListUnder <- reactive({
df <- mtcars
df$Delete <- shinyInput(actionButton, nrow(df),'delete_',label = "",icon=icon("trash"),
style = "color: red;background-color: white",
onclick = paste0('Shiny.onInputChange( \"delete_button\" , this.id, {priority: \"event\"})'))
df$ID <- seq.int(nrow(df))
return(df)
})
# Assign reactive data.frame to reactiveValues
values <- reactiveValues(df = NULL)
values$df <- isolate({getListUnder()})
# When press delete_button, remove row
observeEvent( input$delete_button, {
selectedRow <- as.numeric(strsplit(input$delete_button, "_")[[1]][2])
values$df <<- subset(values$df, ID!=selectedRow)
})
# Render data.table
output$print_mtcars <- renderDataTable({
final_df <- values$df
table <- final_df %>%
DT::datatable(filter = "none", rownames = F
,extensions = 'FixedColumns'
,options = list(pageLength = 10,scrollX = TRUE,
fixedColumns = list(leftColumns = 2)),
escape=F)
})
}
# UI
ui <- fluidPage(
titlePanel("Delete rows"),
mainPanel(
DT::dataTableOutput("print_mtcars")
)
)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Server
server <- function(input, output) {
# Auxiliary function
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
# Reactive
getListUnder <- reactive({
df <- mtcars
icon.tmp <- icon("trash")
df$Delete <- shinyInput(actionButton, nrow(df),'delete_',label = "",icon=icon.tmp,
style = "color: red;background-color: white",
onclick = paste0('Shiny.onInputChange( \"delete_button\" , this.id, {priority: \"event\"})'))
df$ID <- seq.int(nrow(df))
return(df)
})
# Assign reactive data.frame to reactiveValues
values <- reactiveValues(df = NULL)
values$df <- isolate({getListUnder()})
# When press delete_button, remove row
observeEvent( input$delete_button, {
selectedRow <- as.numeric(strsplit(input$delete_button, "_")[[1]][2])
values$df <<- subset(values$df, ID!=selectedRow)
})
# Render data.table
output$print_mtcars <- renderDataTable({
final_df <- values$df
table <- final_df %>%
DT::datatable(filter = "none", rownames = F
,extensions = 'FixedColumns'
,options = list(pageLength = 10,scrollX = TRUE,
fixedColumns = list(leftColumns = 2)),
escape=F)
})
}
# UI
ui <- fluidPage(
titlePanel("Delete rows"),
mainPanel(
DT::dataTableOutput("print_mtcars")
)
)
# Run the application
shinyApp(ui = ui, server = server)
library(dplyr)
library(data.table)
library(dplyr)
library(DT)
values <- data.table(a = c(1,2,3),b = c(4,5,6))
ui <- fluidPage(
DT::dataTableOutput('TabBU')
)
server <- function(input, output,session) {
shinyInput <- function(FUN, n, id, ses, ...) {
as.character(FUN(paste0(id, n), ...))
}
getRemoveButton <- function(n, idS = "", lab = "Pit") {
if (stringr::str_length(idS) > 0) idS <- paste0(idS, "-")
ret <- shinyInput(actionButton, n,
'button_', label = "Remove",icon = icon("trash-alt"),
onclick = sprintf('Shiny.onInputChange(\"%sremove_button_%s\",  this.id)' ,idS, lab))
return (ret)
}
values = values %>%
mutate(id = 1:nrow(values))
values = values %>%
rowwise() %>%
mutate(Remove = getRemoveButton(id, idS = "", lab = "Tab1"))
output$TabBU <- renderDT(values)
}
shinyApp(ui, server)
library(dplyr)
library(data.table)
library(dplyr)
library(DT)
values <- data.table(a = c(1,2,3),b = c(4,5,6))
ui <- fluidPage(
DT::dataTableOutput('TabBU')
)
server <- function(input, output,session) {
shinyInput <- function(FUN, n, id, ses, ...) {
as.character(FUN(paste0(id, n), ...))
}
getRemoveButton <- function(n, idS = "", lab = "Pit") {
if (stringr::str_length(idS) > 0) idS <- paste0(idS, "-")
ret <- shinyInput(actionButton, n,
'button_', label = "Remove",icon = icon("trash-alt"),
onclick = sprintf('Shiny.onInputChange(\"%sremove_button_%s\",  this.id)' ,idS, lab))
return (ret)
}
values = values %>%
mutate(id = 1:nrow(values))
values = values %>%
rowwise() %>%
mutate(Remove = getRemoveButton(id, idS = "", lab = "Tab1"))
output$TabBU <- renderDT(
datatable(values,
escape = FALSE))
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
help("subset")
a <- c("a","b","c")
setdiff(a,"b")
runApp()
runApp()
legend.nodes <- data.frame(label = c(net.names,"Endpoint", "Score"),
shape = c(rep("dot",num.layers),"square","image"),
color.background = c(rep("grey",num.layers),"white","white"),
color.border = c(col.borders[1:num.layers], "black","black"),
font.size = c(rep(16,num.layers),16,16),
borderWidth = c(rep(3,num.layers),3,3),
image=c(rep("",num.layers),"","https://alpha.dmi.unict.it/~gmicale/Documents/activity.png"))
runApp()
runApp()
req <- "https://www.ncbi.nlm.nih.gov/gene/?term=(aat-1%5BGene+Name%5D)+AND+6239%5BTaxonomy+ID%5D"
resp <- req_perform(req)
library(httr2)
resp <- req_perform(req)
req <- req_body_raw(req)
help("req_body_raw")
require(RCurl)
install.packages("RCurl")
require(XML)
install.packages("XML")
require(RCurl)
require(XML)
webpage <- getURL("https://www.ncbi.nlm.nih.gov/gene/?term=(aat-1%5BGene+Name%5D)+AND+6239%5BTaxonomy+ID%5D")
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
View(webpage)
head(webpage)
head(webpage,20)
head(webpage,100)
grep("WormBase:")
grep("WormBase:",webpage)
webpage[grep("WormBase:",webpage)]
row <- webpage[grep("WormBase:",webpage)]
strsplit(row,"<>")
strsplit(row,"<|>")
strsplit(row,"<|>")[[1]][3]
noquote(strsplit(row,"<|>")[[1]][3])
strsplit(noquote(strsplit(row,"<|>")[[1]][3]),":")
strsplit(noquote(strsplit(row,"<|>")[[1]][3]),":")[[1]][2]
webpage[grep("Gene ID:",webpage)]
webpage[grep("Gene ID:",webpage)][2]
webpage <- getURL("https://www.ncbi.nlm.nih.gov/gene/?term=WBGene00000002+AND+6239%5BTaxonomy+ID%5D")
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
row <- webpage[grep("Gene ID:",webpage)][2]
row
strsplit(noquote(strsplit(row,"<|>")[[1]][3]),":")[[1]][2]
noquote(strsplit(row,"<|>")[[1]][3])
strsplit(row,"<|>")
strsplit(noquote(strsplit(row,"<|>")[[1]][5]),":")[[1]][2]
runApp()
file <- "Data/Input/Phensim/ISG15-up-human.tsv"
file.header <- read.table(file,header = F,nrows = 1,sep="\t")
file.header <- read.table(file,header = T,nrows = 0,sep="\t")
head(read.table())
head(read.table)
scan(file,what=character(),nlines=1,sep="\t")
pathways.data <- fread(file)
colnames(pathways.data)
runApp()
runApp()
organism <- map.organism[map.organism$Code==tolower(unlist(strsplit(pathways.data[1,1],":|-"))[2]),"Organism"]
pathways.data[1,1]
strsplit(pathways.data[1,1],":|-")
pathways.data <- as.data.frame(pathways.data)
pathways.data[1,1]
strsplit(pathways.data[1,1],":|-")
as.data.frame(pathways.data[1,1])
strsplit(as.data.frame(pathways.data[1,1]),":|-")
runApp()
organism <- "Human"
#organism <- "Mouse"
gene <- "ISG15"
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/",gene,"_up_",tolower(organism),".tsv"),sep="\t",header=T))
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/Phensim/",gene,"_up_",tolower(organism),".tsv"),sep="\t",header=T))
paste0("Data/Input/Phensim/",gene,"_up_",tolower(organism),".tsv")
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/Phensim/",gene,"-up-",tolower(organism),".tsv"),sep="\t",header=T))
organism <- map.organism[map.organism$Code==tolower(unlist(strsplit(input.data[1,1],":|-"))[2]),"Organism"]
input.data <- as.data.frame(unique(pathways.data[,c("Node Id","Activity Score")]))
input.data$Organism <- organism
input.data <- input.data[,c(2,3,1)]
input.data <- as.data.frame(unique(pathways.data[,c("Node Id","Activity Score")]))
input.data$Organism <- organism
input.data <- input.data[,c(3,1,2)]
write.table(input.data,paste0("Data/Input/Custom/",gene,"-up-",tolower(organism),".txt"),sep="\t",row.names = F,quote=F)
colnames(input.data) <- c("Organism","Node","Score")
write.table(input.data,paste0("Data/Input/Custom/",gene,"-up-",tolower(organism),".txt"),sep="\t",row.names = F,quote=F)
#organism <- "Human"
organism <- "Mouse"
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/Phensim/",gene,"-up-",tolower(organism),".tsv"),sep="\t",header=T))
organism <- map.organism[map.organism$Code==tolower(unlist(strsplit(input.data[1,1],":|-"))[2]),"Organism"]
input.data <- as.data.frame(unique(pathways.data[,c("Node Id","Activity Score")]))
input.data$Organism <- organism
input.data <- input.data[,c(3,1,2)]
colnames(input.data) <- c("Organism","Node","Score")
write.table(input.data,paste0("Data/Input/Custom/",gene,"-up-",tolower(organism),".txt"),sep="\t",row.names = F,quote=F)
#organism <- "Human"
organism <- "Mouse"
gene <- "ISG15"
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/Phensim/",gene,"-up-",tolower(organism),".tsv"),sep="\t",header=T))
organism <- map.organism[map.organism$Code==tolower(unlist(strsplit(input.data[1,1],":|-"))[2]),"Organism"]
input.data <- as.data.frame(unique(pathways.data[,c("Node Id","Activity Score")]))
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/Phensim/",gene,"-up-",tolower(organism),".tsv"),sep="\t",header=T))
organism <- map.organism[map.organism$Code==tolower(unlist(strsplit(input.data[1,1],":|-"))[2]),"Organism"]
input.data <- as.data.frame(unique(input.data[,c("Node Id","Activity Score")]))
input.data$Organism <- organism
input.data <- input.data[,c(3,1,2)]
colnames(input.data) <- c("Organism","Node","Score")
write.table(input.data,paste0("Data/Input/Custom/",gene,"-up-",tolower(organism),".txt"),sep="\t",row.names = F,quote=F)
organism <- "Human"
#organism <- "Mouse"
gene <- "ISG15"
#INPUT DATA
input.data <- as.data.frame(fread(paste0("Data/Input/Phensim/",gene,"-up-",tolower(organism),".tsv"),sep="\t",header=T))
organism <- map.organism[map.organism$Code==tolower(unlist(strsplit(input.data[1,1],":|-"))[2]),"Organism"]
input.data <- as.data.frame(unique(input.data[,c("Node Id","Activity Score")]))
input.data$Organism <- organism
input.data <- input.data[,c(3,1,2)]
colnames(input.data) <- c("Organism","Node","Score")
write.table(input.data,paste0("Data/Input/Custom/",gene,"-up-",tolower(organism),".txt"),sep="\t",row.names = F,quote=F)
runApp()
file <- "Data/Input/Custom/ISG15_up_human.txt"
pathways.data <- as.data.frame(fread(file))
file <- "Data/Input/Custom/ISG15-up-human.txt"
pathways.data <- as.data.frame(fread(file))
"Activity Score" %in% colnames(pathways.data)
organism <- map.organism[map.organism$Code==tolower(pathways.data$Organism[1]),"Organism"]
pathways.data$Organism[1]
map.organism[map.organism$Code==tolower(pathways.data$Organism[1]),"Organism"]
organism <- map.organism[map.organism$Organism==tolower(pathways.data$Organism[1]),"Organism"]
map.organism[map.organism$Organism==tolower(pathways.data$Organism[1]),"Organism"]
map.organism[map.organism$Organism==tolower(pathways.data$Organism[1]),]
map.organism$Organism==tolower(pathways.data$Organism[1])
organism <- map.organism[map.organism$Organism==pathways.data$Organism[1],"Organism"]
runApp()
#ORTHOLOGS
ortho.data <- as.data.frame(fread("Data/Orthologs/Human_Mouse.txt",sep="\t",header=T))
readRDS("Data/Orthologs/Human_Mouse.rds")
#ORTHOLOGS
ortho.data <- as.data.frame(fread("Data/Orthologs/Human-Mouse.txt",sep="\t",header=T))
head(ortho.data)
ortho.data[,c("Human symbol","Human symbol")]
head(ortho.data[,c("Human symbol","Human symbol")])
head(ortho.data)
sub.data <- ortho.data[,c("Human symbol","Human id")]
saveRDS(ortho.data,"Data/Orthologs/Human_Human.rds")
sub.data <- ortho.data[,c("Mouse symbol","Mouse id")]
saveRDS(ortho.data,"Data/Orthologs/Mouse_Mouse.rds")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
